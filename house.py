# -*- coding: utf-8 -*-
"""House.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12H2Szkv-QvUFb6iKAMgjyI2ggP5Ml4YE
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import sklearn.datasets

df=pd.read_csv('/content/Bengaluru_House_Data.csv')

df.columns

df.groupby('area_type')['area_type'].agg('count')

df.isnull().sum()

df1=df.drop(['area_type', 'society', 'balcony', 'availability'], axis=1)
df1

df.shape

df.head()

df['bath'].unique

df1.isnull().sum()

df1['size'].unique()

df1['bhk'] = df1['size'].apply(lambda x: int(str(x).split(' ')[0]) if pd.notna(x) else np.nan)

df1['bhk'] = df1['bhk'].fillna(0).astype(int)

df1['bhk'].unique()

df1[df1.bhk>20]

df1['total_sqft'].unique()

def is_float(x):
    try:
       float(x)
    except:
       return False
    return True

df1[~df1['total_sqft'].apply(is_float)].head(10)

def convert_to_num(x):
   tokens=x.split(' - ')
   if len(tokens)==2:
      return(float(tokens[0])+float(tokens[1]))/2
   try:
     return float(x)
   except:
     return None

df2=df1.copy()

df2['total_sqft'].astype(int)

df2['total_sqft']=df2['total_sqft'].apply(convert_to_num)

df2['total_sqft']

df2.loc[30]

df2['total_sqft'].unique()

df2['total_sqft'] = df2['total_sqft'].fillna(0).astype(int)

df2['price_per_sqft']=df2['price']*100000/df2['total_sqft']

df2

len(df2['location'].unique())

len(df2.location.unique())

df2.dtypes

df2['location']=df2['location'].astype(str)

df2.location=df2.location.apply(lambda x: x.strip())
location_stas=df2.groupby('location')['location'].agg('count')
location_stas

len(location_stas [location_stas<=10])

lt_10_location_stas=(location_stas [location_stas<=10])
lt_10_location_stas

df2.location=df2.location.apply(lambda x: 'other' if x in lt_10_location_stas else x)
len(df2.location.unique())

df2.head()

df2[df2['total_sqft']/df2['bhk']<300]

df3=df2[~(df2['total_sqft']/df2['bhk']<300)]

df3.shape

len(df3['price_per_sqft'])

Q1 = df3['price_per_sqft'].quantile(0.25)
Q3 = df3['price_per_sqft'].quantile(0.75)

# Calculate the IQR (Interquartile Range)
IQR = Q3 - Q1

# Define the lower and upper bounds for outlier removal
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Filter out outliers
df4 = df3[(df3['price_per_sqft'] >= lower_bound) & (df3['price_per_sqft'] <= upper_bound)]

print(df4)

def scatter(df, location):
  bhk2=df[(df.location==df.location)&(df.bhk==2)]
  bhk3=df[(df.location==df.location)&(df.bhk==3)]
  plt.scatter(bhk2.total_sqft, bhk2.price, color='blue', label='2bhk', s=50)
  plt.scatter(bhk3.total_sqft, bhk3.price, color='Red', label='3bhk', s=50)
  plt.xlabel('Total square feet area')
  plt.ylabel('price')
scatter(df4, 'Rajaji Nagar')

def rem_outlier(df):
  exclude=np.array([])
  for location, location_df in df.groupby('location'):
    bhk_stas={}
    for bhk, bhk_df in location_df.groupby('bhk'):
      bhk_stas[bhk]={
          'mean': np.mean(bhk_df.price_per_sqft),
          'std': np.std(bhk_df.price_per_sqft),
          'count': bhk_df.shape[0]}
    for bhk, bhk_df in location_df.groupby('bhk'):
      stats=bhk_stas.get(bhk-1)
      if stats and stats['count']>5:
        exclude=np.append(exclude, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)
  return df.drop(exclude, axis='index')
df5=rem_outlier(df4)
df5.shape

scatter(df5, 'Rajaji Nagar')

plt.hist(df5.price_per_sqft, rwidth=0.8)

df6=df5[df5.bath<df5.bhk+2]
df6.shape

df6=df6.drop(['size', 'price_per_sqft'], axis=1)

df6.head(3)

df6

dummies=pd.get_dummies(df6.location)
dummies

df7=pd.concat([df6, dummies.drop('other', axis='columns')], axis='columns')

df7.price

df8=df7.drop('location', axis=1)
df8.shape

df8.price

X=df8.drop('price', axis=1)
X.shape

df8.pri

y=df8['price']
y.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.2, random_state=10)



from sklearn.linear_model import LinearRegression
lr_model=LinearRegression()
lr_model.fit(X_train, y_train)
lr_model.score(X_test, y_test)

from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import cross_val_score
cv=ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)
cross_val_score(LinearRegression(), X,y, cv=cv)

X.columns

np.where(X.columns=='2nd Phase Judicial Layout')[0][0]

def price_predict(location, sqft, bhk, bath):
  loc_index=np.where(X.columns==location)[0][0]
  x=np.zeros(len(X.columns))
  x[0]=sqft
  x[1]=bath
  x[2]=bhk
  if loc_index>=0:
    x[loc_index]=1
  return  lr_model.predict([x])[0]

price_predict('1st Phase JP Nagar', 2000, 4, 2)

price_predict('Indira Nagar', 1000, 2, 2)

import pickle
with open('house_prediction.pickle', 'wb') as f:
  pickle.dump(lr_model, f)

import json
columns={
    'data_columns': [col.lower() for col in X.columns]
}
with open('house_columns.json', 'w') as f:
  f.write(json.dumps(columns))







